service: plantuml-serverless

frameworkVersion: ">=2.46.0 <3.0.0"

provider:
  name: aws
  runtime: java11
  region: eu-west-1
  stage: dev
  profile: core
  timeout: 30
  logRetentionInDays: 30
  lambdaHashingVersion: 20201221
  environment:
    stage: ${self:custom.stage}
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    scanOnPush: true
    images:
      lambdacontainer:
        path: ./
        file: lambdacontainer/Dockerfile

plugins:
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-apigwy-binary

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    plantuml: plantuml.nitorio.us
    dev: plantuml-dev.nitorio.us
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    certificateName: plantuml-dev.nitorio.us
    basePath: ''
    stage: "${self:custom.stage}"
    createRoute53Record: true
  apigwBinary:
    types:
      - '*/*'

functions:
  ui:
    events:
      - http:
          path: /
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.UIHandler::handleRequest
  uml:
    events:
      - http:
          path: uml/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.UmlHandler::handleRequest
  png:
    events:
      - http:
          path: png/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.PngHandler::handleRequest
  img:
    events:
      - http:
          path: img/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.PngHandler::handleRequest
  svg:
    events:
      - http:
          path: svg/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.SvgHandler::handleRequest
  txt:
    events:
      - http:
          path: txt/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.TxtHandler::handleRequest
  map:
    events:
      - http:
          path: map/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.MapHandler::handleRequest
  check:
    events:
      - http:
          path: check/{encodedUml}
          method: get
          integration: lambda-proxy
          cors: true
    image:
      name: lambdacontainer
      command:
        - com.nitor.plantuml.lambda.SyntaxHandler::handleRequest
